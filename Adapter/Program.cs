using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Adapter
{
    /*
     * 适配器模式、代理模式、外观模式
     * 
     * 代理模式（Proxy）：为其他对象提供一种代理以控制对这个对象的访问。
     * 适配器模式（Adapter）：将一个类的接口转换成客户希望的另外一个接口，使得原本接口不兼容而不能一起工作的那些类可以一起工作。
     * 外观模式（Facade）：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
     * 代理模式和适配器模式应该说很相像，但是他们的区别也很明显，
     * 代理模式和被代理者的接口是同一个，只是使用中客户访问不到被代理者，所以利用代理间接的访问，
     * 而适配器模式，是因为接口不同，为了让用户使用到统一的接口，把原先的对象通过适配器让用户统一的使用，
     * 大多数运用在代码维护的后期，或者借用第三方库的情况下 ，而外观模式，是大家经常无意中使用的，
     * 就是把错综复杂的子系统关系封装起来，然后提供一个简单的接口给客户使用，就类似于一个转接口，
     * 可以想象成一个漏斗，中间细的那一段，越细耦合度越低，外观模式就是为了降低耦合度。
     * **/
    class Program
    {
        static void Main(string[] args)
        {
        }
    }
}
