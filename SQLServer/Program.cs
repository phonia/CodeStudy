using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SQLServer
{
    /*
     *  索引：查询执行的大部分开销是i/o，使用索引提高性能的一个主要目标是避免全表扫描，因为全表扫描需要从磁盘上读取表的每一个数据页，如果索引指向数据值，则查询
     *      只需要读少数次的磁盘就可以，所以合理的使用缩影能加速数据的查询。但是缩影并不总是提高系统的性能，带索引的表需要在数据库中占用更多的存储空间，同样用来增删数据的
     *      命令运行时间以及维护索引所需的处理时间会更长
     *  数据表的基本结构：
     *      一个新表被创建之时，系统将在磁盘中分配一段以8K为单位的连续空间，单字段的值从内存写入磁盘时，就在这一既定空间随机保存，当一个8K用完的时候，数据库会自动分配一个8k的空间
     *      这里，每个8k空间被称为一个数据页，并且分配0-7的也好，没个文件的第0页记录引导信息，叫文件头(File header）；每8个数据页64k的组合形成扩展区（Extent），全部数据也组合形成堆(heap)
     *      SQLS规定行不能跨越数据页，所以，每行记录的最大数据量只能为8K,值就是char和varchar这两种字符串类型容量被限制在8k以内的原因，存储超过8K的数据应使用text类型，实际上，text类型
     *      的字段不能直接录入和保存，它只是存储一个指正，指向由若干8k的文本数据页所组成的扩展区，真正的数据正是放在这些数据页中。
     *      页面有控件页面和数据页面之分
     *      当一个扩展区的8个数据页中既包含了控件页面又包括了数据或索引页面时，称为混合扩展，每张表都以混合扩展开始，反之称为一致扩展，专门保存数据及索引信息
     *      表被创建时，SQLS在混合扩展中为其分配至少一个数据页面，随着数据量的增长，SQLS可即时在混合扩展中分配出7个页面，当数据超过8个页面时，则从一致扩展中分配数据页面
     *      控件页面专门负责数据空间的分配和管理，包括PFS（Page free space）页面：记录一个页面是否已分配、位于混合扩展还是一致扩展以及页面上还有多少可用空间等信息；GAM页面（Global allocation map)
     *      和SGAM(Secondary global allocation map)：用来记录空闲的扩展或含有空闲页面的混合扩展的位置。SQLS综合利用这三种类型的页面文件在必要时为数据表创建新空间；
     *      数据页或索引页专门保存数据及索引信息，SQLS使用4中类型的数据页来管理表或索引：IAM页、数据页、文本/图像页和索引页
     *  页分裂
     *      一半的数据将保留在老页面，而另一半将放入新页面，并且新页面肯能被分配到任何可用的也。所以，频繁页分裂后果很严重，将使物理表产生大量数据碎片，导致直接造成i/o效率的急剧下降
     *  填充因子
     *      索引的一个特性，定义该索引每页上的可用空间量。填充因子适应以后表数据的扩展并减小也拆分的可能性。填充因子是从0到100的百分比数值，设为100时表示将数据页填满。只有当不会对数据进行更改时采用此设置。值越小则数据页上的空闲空间越大，
     *      这样可以减少在索引增长过程中进行页分裂的需要，单这一操作需要占用更多的磁盘空间，填充因子使用不当，会降低数据库的读取性能，其降低量与填充因子设置值成反比
     *  索引的分类
     *      按存储结构区分：聚集索引又称聚类索引、簇集索引，分聚集索引（非聚类、非簇集索引）
     *      按数据唯一性区分：唯一索引，非唯一索引
     *      按键列个数区分：单列索引，多列索引
     *  聚集索引
     *      聚集索引是一种对磁盘上世纪数据重新组织以按指定的一列或多列值排序，像我们用到汉语词典，就是一个聚集索引；
     *      由于聚集索引是给数据排序，不可能有多重派发，所以一个表只能建立一个聚集索引
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~以上所有完全看不懂的分割线~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~···
     * 
     * ***/
    class Program
    {
        static void Main(string[] args)
        {
        }
    }
}
